# -*- coding: utf-8 -*-
"""House Price Prediction - XGBoost Regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TozD5UtNbrz-w0Y6RVod1gGtR68ReK8O
"""

import numpy as np
import xgboost
import pandas as pd
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
import seaborn as sns
import sklearn.datasets
from xgboost import XGBRegressor
from sklearn import metrics

house_price_dataset = sklearn.datasets.load_boston()

print(house_price_dataset)

# Loading the dataset to --> Pandas DataFrame

house_price_dataframe = pd.DataFrame(house_price_dataset.data, columns = house_price_dataset.feature_names)
print(house_price_dataframe)

house_price_dataframe = pd.DataFrame(house_price_dataset.data)
print(house_price_dataframe)

house_price_dataframe = pd.DataFrame(house_price_dataset.data, columns = house_price_dataset.feature_names)
print(house_price_dataframe)

house_price_dataframe.head()

#adding target colmns to dataframe

house_price_dataframe['price'] = house_price_dataset.target

house_price_dataframe.head()

#checking the number of rows and columns in the data frame

 house_price_dataframe.shape

#checking for the missing value
house_price_dataframe.isnull().sum()

#statistical message of the dataset
house_price_dataframe.describe(
    
)

"""Understanding the correlation between  various features

"""

corelation = house_price_dataframe.corr()

#plotting a heat map  --> 1 postive correlation-->  both the value increase/ decreases
 
plt.figure(figsize=(10,10))
sns.heatmap(corelation, cbar=True, square=True, fmt='.1f', annot=True, annot_kws={'size':9}, cmap='Blues')



"""Splitting the data and LAbels

"""

X = house_price_dataframe.drop(['price'], axis=1)
Y = house_price_dataframe['price']

print(X)

print(Y)

X_train,X_test,Y_train,Y_test =  train_test_split(X,Y,test_size = 0.2, random_state= 2)

print(X.shape)

print(X_train.shape)

print(X_test.shape)

print(Y_test.shape)

print(Y)

"""Model Training using XGBoost Regressor"""

model = XGBRegressor()
model.fit(X_train, Y_train)

training_data_prediction = model.predict(X_train)

print(training_data_prediction)

score_1 = metrics.r2_score(Y_train, training_data_prediction)

# Mean Absolute Error
score_2 = metrics.mean_absolute_error(Y_train, training_data_prediction)

print("R squared error : ", score_1)
print('Mean Absolute Error : ', score_2)

plt.scatter(Y_train, training_data_prediction)
plt.xlabel("Actual Prices")
plt.ylabel("Predicted Prices")
plt.title("Actual Price vs Preicted Price")
plt.show()

test_data_prediction = model.predict(X_test)

# R squared error
score_1 = metrics.r2_score(Y_test, test_data_prediction)

# Mean Absolute Error
score_2 = metrics.mean_absolute_error(Y_test, test_data_prediction)

print("R squared error : ", score_1)
print('Mean Absolute Error : ', score_2)

